# Tasks 1-5
CREATE TABLE UNIVERSITATE (
  UNIV_ID INT NOT NULL,
  UNIV_DEN VARCHAR(100),
  RATING FLOAT,
  ORAS VARCHAR(50),
  PRIMARY KEY (UNIV_ID)
);
INSERT INTO UNIVERSITATE (UNIV_ID, UNIV_DEN, RATING, ORAS) VALUES
  (22, 'USM', 606, 'Chisinau'), (10, 'USB', 296, 'Balti'),  (11, 'ULIM', 345, 'Chisinau'),
  (32, 'USC', 416, 'Cahul'), (14, 'USD', 326, 'Drochia'), (15, 'USC', 368, 'Chisinau'),
  (18, 'ВГМА', 327, 'Balti');

CREATE TABLE PROFESOR (
  PR_ID INT NOT NULL,
  NUME VARCHAR(50),
  PRENUME VARCHAR(50),
  ORAS VARCHAR(50),
  UNIV_ID INT NOT NULL,
  PRIMARY KEY (PR_ID),
  FOREIGN KEY (UNIV_ID) REFERENCES UNIVERSITATE (UNIV_ID)
);
INSERT INTO PROFESOR (PR_ID, NUME, PRENUME, ORAS, UNIV_ID) VALUES
  (24, 'Iordachi', 'Boris', 'Balti', 10), (46, 'Nuca', 'Ion', 'Balti', 10), (74, 'Lasescu', 'Pavel', 'Chisinau', 22),
  (108, 'Stanescu', 'Nicolai', 'Chisinau', 22), (276, 'Negrescu', 'Victor', 'Balti', 10),
  (328, 'Sorescu', 'Andrei', 'Orhei', 10);

CREATE TABLE CURS (
  CURS_ID INT NOT NULL,
  CURS_DEN VARCHAR(255) NOT NULL,
  ORE INT NOT NULL,
  SEMESTRU INT NOT NULL,
  PRIMARY KEY (CURS_ID)
);
INSERT INTO CURS (CURS_ID, CURS_DEN, ORE, SEMESTRU) VALUES
  (10, 'Informatica', 56, 1), (22, 'Fizica', 34, 1), (43, 'Matematica', 56, 2), (56, 'Istoria', 34, 4),
  (94, 'Limba Engleza', 56, 3), (73, 'Educatia fizica', 34, 5);

CREATE TABLE STUDENT (
  ST_ID INT NOT NULL,
  NUME VARCHAR(255) NOT NULL,
  PRENUME VARCHAR(255) NOT NULL,
  BURSA INT,
  ANUL INT NOT NULL,
  ORAS VARCHAR(255),
  DATA_N DATE,
  UNIV_ID INT NOT NULL,
  PRIMARY KEY (ST_ID),
  FOREIGN KEY (UNIV_ID) REFERENCES UNIVERSITATE(UNIV_ID)
);
INSERT INTO STUDENT (ST_ID, NUME, PRENUME, BURSA, ANUL, ORAS, DATA_N, UNIV_ID) VALUES
  (1, 'Popescu', 'Ion', 150, 1, 'Orhei', '1982-12-3', 10), (3, 'Ionescu', 'Petru', 200, 3, 'Cahul', '1980-12-1', 10),
  (6, 'Sima', 'Vadim', 150, 4, 'Chisinau', '1979-06-7', 22), (10, 'Osman', 'Nicolai', 0, 2, 'Briceni', '1981-12-8', 10),
  (12, 'Casta', 'Olga', 250, 2, 'Lipcani', '1981-05-1', 10), (265, 'Mantas', 'Andrei', 0, 3, 'Balti', '1979-11-5', 10),
  (32, 'Colesnic', 'Petru', 150, 5, 'Drochia', NULL, 14), (654, 'Luca', 'Artur', 200, 3, 'Balti', '1981-12-1', 10),
  (276, 'Petrescu', 'Elena', 200, 4, NULL, '1981-08-5', 22), (55, 'Banescu', 'Vald', 250, 5, 'Balti', '1980-01-7', 10);

CREATE TABLE NOTE_EXAM (
  EXAM_ID INT NOT NULL,
  ST_ID INT NOT NULL,
  CURS_ID INT NOT NULL,
  NOTA INT,
  DATA_EXAM DATE,
  PRIMARY KEY (EXAM_ID),
  FOREIGN KEY (ST_ID) REFERENCES STUDENT(ST_ID),
  FOREIGN KEY (CURS_ID) REFERENCES CURS(CURS_ID)
);
INSERT INTO NOTE_EXAM (EXAM_ID, ST_ID, CURS_ID, NOTA, DATA_EXAM) VALUES
  (145, 12, 10, 10, '2000-01-12'), (34, 32, 10, 9, '2000-01-23'), (75, 55, 10, 9, '2000-01-05'),
  (238, 12, 22, 6, '1999-06-17'), (639, 55, 22, NULL, '1999-06-22'), (43, 6, 22, 5, '2000-01-18');

CREATE TABLE CURS_PROF (
  PR_ID INT NOT NULL,
  CURS_ID INT NOT NULL,
  FOREIGN KEY (PR_ID) REFERENCES PROFESOR(PR_ID),
  FOREIGN KEY (CURS_ID) REFERENCES CURS(CURS_ID) ON DELETE CASCADE
);
INSERT INTO CURS_PROF (PR_ID, CURS_ID) VALUES
  (24, 10), (46, 22), (74, 43), (108, 56), (276, 94), (328, 73);


# Task 6
# ALTER TABLE STUDENT ADD INDEX idx_anul (ANUL);
SELECT * FROM STUDENT WHERE ANUL=3;

# Task 7
CREATE INDEX idx_note_student ON NOTE_EXAM(ST_ID, DATA_EXAM);
SELECT * FROM NOTE_EXAM USE INDEX (idx_note_student) WHERE ST_ID = 12;

# Task 8
INSERT INTO CURS (CURS_ID, CURS_DEN, ORE, SEMESTRU) VALUES (201, 'Algebra', 72, 4);

# Task 9
INSERT INTO STUDENT (ST_ID, NUME, PRENUME, BURSA, ANUL, ORAS, DATA_N, UNIV_ID) VALUES
  (700, 'Osman', 'Nicolai', NULL, 1, 'Balti', NULL, 10);

# Task 10
DELETE FROM NOTE_EXAM WHERE ST_ID = 100;

# Task 11
UPDATE UNIVERSITATE SET RATING = RATING + 5 WHERE ORAS = 'Cahul';

# Task 12
UPDATE STUDENT SET ORAS = 'Balti' WHERE NUME = 'Popescu';

# Task 13
/*CREATE TABLE STUDENTI AS
  SELECT ST_ID, NUME, PRENUME, BURSA, ANUL, ORAS, DATA_N, UNIV_ID
  FROM student
  WHERE ORAS = 'Chisinau';*/
CREATE TABLE STUDENTI (
  ST_ID INT NOT NULL,
  NUME VARCHAR(255) NOT NULL,
  PRENUME VARCHAR(255) NOT NULL,
  BURSA INT,
  ANUL INT NOT NULL,
  ORAS VARCHAR(255),
  DATA_N DATE,
  UNIV_ID INT NOT NULL,
  PRIMARY KEY (ST_ID),
  FOREIGN KEY (UNIV_ID) REFERENCES UNIVERSITATE(UNIV_ID)
);

INSERT INTO STUDENTI (ST_ID, NUME, PRENUME, BURSA, ANUL, ORAS, DATA_N, UNIV_ID)
SELECT ST_ID, NUME, PRENUME, BURSA, ANUL, ORAS, DATA_N, UNIV_ID
FROM STUDENT
WHERE ORAS = 'Chisinau';

# Task 14
INSERT INTO STUDENTI (ST_ID, NUME, PRENUME, BURSA, ANUL, ORAS, DATA_N, UNIV_ID)
SELECT STUDENT.ST_ID, STUDENT.NUME, STUDENT.PRENUME, STUDENT.BURSA, STUDENT.ANUL, STUDENT.ORAS, STUDENT.DATA_N, STUDENT.UNIV_ID
FROM (
  SELECT ST_ID, COUNT(*) AS NR_EXAMENE
  FROM NOTE_EXAM
  WHERE NOTA >= 5
  GROUP BY ST_ID
) T
JOIN STUDENT ON T.ST_ID = STUDENT.ST_ID
WHERE T.NR_EXAMENE > 5;

# Task 15
DELETE FROM CURS
WHERE CURS_ID NOT IN (SELECT DISTINCT CURS_ID FROM NOTE_EXAM);

# Task 16
UPDATE STUDENT SET BURSA = BURSA * 1.2 WHERE ST_ID IN (SELECT ST_ID
FROM NOTE_EXAM
GROUP BY ST_ID
HAVING SUM(NOTA) >50);

# Task 17
SELECT * FROM STUDENT;

# Task 18
SELECT DISTINCT ORAS
FROM STUDENT
WHERE ORAS IS NOT NULL;

# Task 19
SELECT NUME, PRENUME
FROM STUDENT
WHERE NUME = 'PETROV';

# Task 20
SELECT *
FROM STUDENT
WHERE ANUL = 3 AND BURSA > 0;

# Task 21
SELECT * FROM CURS;

# Task 22
SELECT * FROM NOTE_EXAM WHERE CURS_ID=12;

# Task 23
SELECT ANUL, PRENUME, NUME, BURSA FROM STUDENT;

# Task 24
SELECT CURS_DEN, ORE FROM CURS WHERE SEMESTRU = 4;

# Task 25
SELECT DISTINCT NOTA
FROM NOTE_EXAM
WHERE NOTA IS NOT NULL;

# Task 26
SELECT NUME
FROM STUDENT
WHERE ANUL >= 3;

# Task 27
SELECT NUME, PRENUME, ANUL
FROM STUDENT
WHERE BURSA > 140;

# Task 28
SELECT *
FROM CURS
WHERE ORE > 30;

# Task 29
SELECT *
FROM UNIVERSITATE
WHERE RATING > 300;

# Task 30
SELECT NUME, PRENUME, ANUL
FROM STUDENT
WHERE BURSA >= 100 AND ORAS ='BALTI';

# Task 31
SELECT NUME, NOTA
FROM STUDENT INNER JOIN NOTE_EXAM
ON STUDENT.ST_ID=NOTE_EXAM.ST_ID
WHERE NOTA IN (9,10);

# Task 32
SELECT *
FROM CURS
WHERE ORE > 30 AND ORE < 40;

# Task 33
SELECT *
FROM STUDENT
WHERE NUME LIKE'P%';

# Task 34
SELECT CURS_ID
FROM NOTE_EXAM
WHERE DATA_EXAM > '1999-01-10' AND DATA_EXAM < '1999-01-20';

# Task 35
SELECT *
FROM CURS
WHERE CURS_ID IN (
  SELECT CURS_ID
  FROM NOTE_EXAM
  WHERE ST_ID IN (12,32) AND NOTA >=5
);

# Task 36
SELECT *
FROM CURS
WHERE CURS_DEN LIKE 'I%';

# Task 37
SELECT *
FROM STUDENT
WHERE LEFT(NUME, 1) = 'I' OR LEFT(NUME, 1) = 'C';

# Task 38
SELECT *
FROM NOTE_EXAM
WHERE NOTA IS NULL;

# Task 39
SELECT *
FROM NOTE_EXAM
WHERE NOTA IS NOT NULL;

# Task 40
SELECT CONCAT_WS(
  ';', UPPER(ST_ID), UPPER(NUME), UPPER(PRENUME),
  UPPER(BURSA), UPPER(IFNULL(ORAS, 'Nu are date despre oras')),
  UPPER(IFNULL(DATE_FORMAT(DATA_N, '%d/%m/%Y'), 'Nu are date despre data nasterii')), UPPER(ANUL)
)
FROM STUDENT;

# Task 41
SELECT CONCAT(
  SUBSTRING(PRENUME,1,1), '.', UPPER(NUME),
  '; localitatea - ', UPPER(IFNULL(ORAS, 'Nu exista')),
  '; născut la ', IFNULL(UPPER(DATE_FORMAT(DATA_N, '%d/%m/%Y')), 'Nu are date despre data nasterii')
)
FROM STUDENT;

# Task 42
SELECT CONCAT(
  LOWER(SUBSTRING(PRENUME,1,1)), '.', LOWER(NUME),
  '; localitatea - ', LOWER(IFNULL(ORAS, 'Nu exista')),
  '; născut la ', IFNULL(LOWER(DATE_FORMAT(DATA_N, '%d-%b-%Y')), 'Nu are date despre data nasterii')
)
FROM STUDENT;

# Task 43
SELECT CONCAT(NUME, ' ', PRENUME, ' s-a născut în anul ', IFNULL(YEAR(DATA_N), '<nu sunt date despre anul nasterii>'))
AS informatii_student
FROM STUDENT;

# Task 44
SELECT CONCAT(NUME, ' ', PRENUME, ' s-a născut în anul ', IFNULL(YEAR(DATA_N), '<nu sunt date despre anul nasterii>'))
AS informatii_student
FROM STUDENT
WHERE ANUL IN (1, 2, 4);

# Task 45
SELECT NUME, BURSA*100
FROM STUDENT
WHERE BURSA > 0;

# Task 46
SELECT CONCAT('Cod-', UNIV_ID, '; ', UNIV_DEN, '-or.', ORAS, '; Reiting-', RATING) AS Info FROM UNIVERSITATE;

# Task 47
SELECT CONCAT('Cod-', UNIV_ID, '; ', UNIV_DEN, '-or.', ORAS, '; Reiting-', ROUND(RATING, -2)) AS Info FROM UNIVERSITATE;

# Task 48
SELECT AVG(CAST(NOTA AS FLOAT)) AS AVERAGE
FROM NOTE_EXAM;

# Task 49
SELECT COUNT(*) AS TOTAL_ST
FROM STUDENT;

# Task 50
SELECT STUDENT.ST_ID, MAX(NOTA)
FROM STUDENT LEFT JOIN NOTE_EXAM ON STUDENT.ST_ID=NOTE_EXAM.ST_ID
GROUP BY STUDENT.ST_ID;

# Task 51
SELECT COUNT(DISTINCT ST_ID)
FROM NOTE_EXAM
WHERE CURS_ID=20 AND NOTA>=5;

# Task 52
SELECT COUNT(DISTINCT CURS_ID) AS TOTAL_CURS
FROM NOTE_EXAM;

# Task 53
SELECT STUDENT.ST_ID, MIN(NOTA)
FROM STUDENT LEFT JOIN NOTE_EXAM ON STUDENT.ST_ID=NOTE_EXAM.ST_ID
GROUP BY STUDENT.ST_ID;

# Task 54
SELECT NUME
FROM STUDENT
WHERE NUME LIKE 'I%'
ORDER BY NUME ASC
LIMIT 1;

# Task 55
SELECT CURS_DEN, MAX(SEMESTRU) AS TOTAL
FROM CURS
GROUP BY CURS_DEN, SEMESTRU;

# Task 56
SELECT DATA_EXAM, COUNT(DISTINCT ST_ID) AS STUDENTI
FROM NOTE_EXAM
WHERE NOTA > 5
GROUP BY DATA_EXAM;

# Task 57
SELECT CURS.SEMESTRU, CURS.CURS_DEN, AVG(NOTE_EXAM.NOTA) AS MEDIA
FROM CURS
INNER JOIN NOTE_EXAM ON CURS.CURS_ID = NOTE_EXAM.CURS_ID
GROUP BY CURS.SEMESTRU, CURS.CURS_DEN;

# Task 58
SELECT NUME, PRENUME, AVG(CAST(NOTA AS FLOAT)) AS AVERAGE_ST
FROM NOTE_EXAM INNER JOIN STUDENT ON NOTE_EXAM.ST_ID=STUDENT.ST_ID
GROUP BY NUME, PRENUME;

# Task 59
SELECT EXAM_ID, AVG(CAST(NOTA AS FLOAT)) AS AVERAGE_EXAM
FROM NOTE_EXAM
GROUP BY EXAM_ID;

# Task 60
SELECT EXAM_ID, COUNT(ST_ID) AS NR_STUDENT
FROM NOTE_EXAM
WHERE NOTA>=5
GROUP BY EXAM_ID;

# Task 61
SELECT 1 AS AN, COUNT(CURS_ID) AS NR_CURS
FROM CURS
WHERE SEMESTRU IN (1,2)
UNION SELECT 2, COUNT(CURS_ID)
FROM CURS
WHERE SEMESTRU IN (3,4)
UNION SELECT 3, COUNT(CURS_ID)
FROM CURS;

# Task 62
SELECT ST_ID, NUME, PRENUME,(STUDENT.BURSA * 1.2) AS BURSA_MARITA
FROM STUDENT
ORDER BY BURSA, NUME ASC;

# Task 63
SELECT ST_ID, MAX(NOTA) AS MAXIMUM, MIN(NOTA) AS MINIMUM
FROM NOTE_EXAM
GROUP BY ST_ID;

# Task 64
SELECT SEMESTRU, CURS_DEN, CURS_ID
FROM CURS
ORDER BY SEMESTRU DESC, ORE ASC;

# Task 65
SELECT DATA_EXAM, SUM(NOTA) AS SUM
FROM NOTE_EXAM
GROUP BY DATA_EXAM
ORDER BY SUM DESC;

# Task 66
SELECT DATA_EXAM, MAX(NOTA) AS MAXIM, MIN(NOTA) AS MINIM, AVG(CAST(NOTA AS FLOAT)) AS AVERAGE
FROM NOTE_EXAM
GROUP BY DATA_EXAM
ORDER BY AVERAGE DESC, MINIM DESC, MAXIM DESC;

# Task 67
SELECT NOTA
FROM NOTE_EXAM
WHERE ST_ID=(SELECT ST_ID FROM STUDENT WHERE NUME='POPESCU');

# Task 68
SELECT NUME, CURS_ID, NOTA
FROM NOTE_EXAM JOIN STUDENT
ON NOTE_EXAM.ST_ID=STUDENT.ST_ID
WHERE NOTA>(SELECT AVG(NOTA) FROM NOTE_EXAM) AND CURS_ID=101;

# Task 69
SELECT NUME, CURS_ID, NOTA
FROM NOTE_EXAM JOIN STUDENT
ON NOTE_EXAM.ST_ID=STUDENT.ST_ID
WHERE NOTA>(SELECT AVG(NOTA) FROM NOTE_EXAM) AND CURS_ID=102;

# Task 70
SELECT COUNT(DISTINCT CURS_ID) AS CURS
FROM NOTE_EXAM
WHERE ST_ID IN(SELECT ST_ID FROM NOTE_EXAM WHERE NOTA >=5
GROUP BY ST_ID
HAVING COUNT(NOTA)>20);

# Task 71
SELECT NUME,ST_ID,BURSA,ORAS
FROM(SELECT NUME,ST_ID,ORAS,BURSA FROM STUDENT) AS T1
INNER JOIN (SELECT ORAS AS ORASS1, MAX(BURSA)
AS BURSA1 FROM STUDENT WHERE ORAS IS NOT NULL
GROUP BY ORAS) AS T2
ON ORAS = ORASS1 AND BURSA = BURSA1;

# Task 72
SELECT NUME,ST_ID
FROM STUDENT AS STUD
WHERE ORAS NOT IN(SELECT DISTINCT ORAS FROM UNIVERSITATE);

# Task 73
SELECT ST_ID,NUME
FROM STUDENT INNER JOIN UNIVERSITATE
ON STUDENT.UNIV_ID = UNIVERSITATE.UNIV_ID
WHERE STUDENT.ORAS != UNIVERSITATE.ORAS;

# Task 74
SELECT ST_ID,NUME
FROM STUDENT
WHERE ST_ID IN (SELECT DISTINCT ST_ID
FROM NOTE_EXAM
WHERE NOTA < 5);

# Task 75
SELECT CURS_ID
FROM NOTE_EXAM
WHERE NOTA >= 5
GROUP BY CURS_ID
HAVING COUNT(ST_ID)>1;

# Task 76
SELECT ST_ID,COUNT(NOTA) AS PASSED
FROM NOTE_EXAM
WHERE NOTA >= 5
GROUP BY ST_ID
HAVING COUNT(NOTA) >= 1;

# Task 77
SELECT *
FROM STUDENT
WHERE UNIV_ID IN (SELECT UNIV_ID
FROM UNIVERSITATE
WHERE RATING > 300);

# Task 78
SELECT  *
FROM STUDENT
WHERE STUDENT.ORAS IN (SELECT DISTINCT ORAS
FROM UNIVERSITATE)
AND STUDENT.ORAS != (SELECT ORAS
FROM UNIVERSITATE WHERE UNIV_ID = STUDENT.UNIV_ID);

# Task 79
SELECT *
FROM CURS
WHERE CURS_ID IN (SELECT CURS_ID
FROM NOTE_EXAM
WHERE NOTA >= 5
GROUP BY CURS_ID
HAVING  COUNT(ST_ID)>=1 );

# Task 80
SELECT *
FROM STUDENT
WHERE ORAS = (SELECT ORAS
FROM UNIVERSITATE
WHERE UNIV_ID = STUDENT.UNIV_ID);

# Task 81
SELECT DISTINCT ST_ID
FROM NOTE_EXAM
WHERE NOTA > (SELECT NOTA
FROM NOTE_EXAM
WHERE DATA_EXAM = '1999-12-06');

# Task 82
SELECT *
FROM UNIVERSITATE
WHERE RATING > ALL (SELECT MAX(RATING)
FROM UNIVERSITATE
WHERE ORAS = 'BALTI');

# Task 83
SELECT *
FROM UNIVERSITATE
WHERE (UNIV_DEN != 'USB'
OR ORAS != 'BALTI')
AND RATING >= (SELECT RATING
FROM UNIVERSITATE
WHERE UNIV_DEN = 'USB'
AND ORAS = 'BALTI');

# Task 84
SELECT *
FROM STUDENT
WHERE ORAS NOT IN (SELECT DISTINCT ORAS FROM UNIVERSITATE);

# Task 85
SELECT DISTINCT CURS_ID
FROM NOTE_EXAM
WHERE NOTA > (SELECT MAX(NOTA)
FROM NOTE_EXAM
WHERE CURS_ID = 105);

# Task 86
SELECT DISTINCT NUME,CURS_ID
FROM STUDENT INNER JOIN NOTE_EXAM
ON STUDENT.ST_ID = NOTE_EXAM.ST_ID
WHERE NOTA >= 5;

# Task 87
SELECT DISTINCT STUDENT. *,
IF(NOTA >= 5, CURS_ID, NULL) AS CURS
FROM STUDENT LEFT JOIN NOTE_EXAM ON STUDENT.ST_ID = NOTE_EXAM.ST_ID;

# Task 88
SELECT NUME, CURS_DEN
FROM STUDENT INNER JOIN (SELECT DISTINCT ST_ID,CURS_ID
FROM NOTE_EXAM) AS ST ON
STUDENT.ST_ID INNER JOIN CURS ON ST.CURS_ID = CURS.CURS_ID;

# Task 89
SELECT ST_ID, CURS_ID
FROM NOTE_EXAM
WHERE NOTA IN (9,10)
ORDER BY ST_ID;

# Task 90
SELECT NUME, CURS_DEN, NOTA
FROM STUDENT INNER JOIN NOTE_EXAM ON STUDENT.ST_ID = NOTE_EXAM.ST_ID INNER JOIN CURS ON CURS.CURS_ID = NOTE_EXAM.CURS_ID
WHERE NOTA IN (8, 9, 10);

# Task 91
SELECT RATING.UNIV_ID, BURSA.MAX_BURSA
FROM (SELECT UNIV_ID FROM UNIVERSITATE WHERE RATING > 300) AS RATING LEFT JOIN(SELECT UNIV_ID, MAX(BURSA) AS MAX_BURSA
FROM STUDENT
GROUP BY UNIV_ID) AS BURSA ON RATING.UNIV_ID = BURSA.UNIV_ID;

# Task 92
SELECT NUME,PRENUME, RATING
FROM STUDENT LEFT JOIN UNIVERSITATE ON STUDENT.UNIV_ID = UNIVERSITATE.UNIV_ID
ORDER BY NUME, PRENUME;

# Task 93
SELECT S1.NUME, S1.PRENUME
FROM STUDENT AS S1 INNER JOIN (SELECT NUME, PRENUME FROM STUDENT) AS S2 ON S1.PRENUME = S2.PRENUME
WHERE S1.PRENUME = S2.PRENUME GROUP BY S1.PRENUME, S1.NUME
HAVING COUNT(S1.ST_ID) > 1
ORDER BY S1.PRENUME;

# Task 94
SELECT DISTINCT S1.NUME, S2.NUME
FROM STUDENT AS S1 CROSS JOIN (SELECT NUME, ORAS FROM STUDENT) AS S2
WHERE S1.ORAS = S2.ORAS AND S1.NUME != S2.NUME;

# Task 95
SELECT DISTINCT S1.UNIV_DEN, S2.UNIV_DEN
FROM UNIVERSITATE AS S1 CROSS JOIN (SELECT UNIV_DEN, ORAS FROM UNIVERSITATE) AS S2
WHERE S1.ORAS = S2.ORAS AND S1.UNIV_DEN != S2.UNIV_DEN;

# Task 96
SELECT UNIV_DEN, ORAS
FROM UNIVERSITATE
WHERE RATING >= (SELECT MIN(RATING) FROM UNIVERSITATE WHERE ORAS = 'BALTI');